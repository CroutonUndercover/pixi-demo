diff --git a/node_modules/@pixi/utils/dist/esm/utils.js b/node_modules/@pixi/utils/dist/esm/utils.js
index f16da9d..1dcd3ac 100644
--- a/node_modules/@pixi/utils/dist/esm/utils.js
+++ b/node_modules/@pixi/utils/dist/esm/utils.js
@@ -117,36 +117,43 @@ var supported;
  * @function isWebGLSupported
  * @return {boolean} Is WebGL supported.
  */
-function isWebGLSupported() {
-    if (typeof supported === 'undefined') {
-        supported = (function supported() {
-            var contextOptions = {
-                stencil: true,
-                failIfMajorPerformanceCaveat: settings.FAIL_IF_MAJOR_PERFORMANCE_CAVEAT,
-            };
-            try {
-                if (!self.WebGLRenderingContext) {
-                    return false;
-                }
-                var canvas = document.createElement('canvas');
-                var gl = (canvas.getContext('webgl', contextOptions)
-                    || canvas.getContext('experimental-webgl', contextOptions));
-                var success = !!(gl && gl.getContextAttributes().stencil);
-                if (gl) {
-                    var loseContext = gl.getExtension('WEBGL_lose_context');
-                    if (loseContext) {
-                        loseContext.loseContext();
-                    }
-                }
-                gl = null;
-                return success;
-            }
-            catch (e) {
-                return false;
-            }
-        })();
-    }
-    return supported;
+ function isWebGLSupported() {
+   if (typeof supported === 'undefined') {
+       supported = (function supported() {
+           var contextOptions = {
+               stencil: true,
+               failIfMajorPerformanceCaveat: settings.FAIL_IF_MAJOR_PERFORMANCE_CAVEAT,
+           };
+           try {
+               if (!window.WebGLRenderingContext) {
+                   return false;
+               }
+               var canvas = document.createElement('canvas');
+               var gl = (
+                   canvas.getContext('webgl', contextOptions) ||
+                   canvas.getContext('experimental-webgl', contextOptions)
+               );
+
+               if (gl) {
+                   var hasGPU = true;
+                   if(gl.getParameter(gl.getExtension('WEBGL_debug_renderer_info').UNMASKED_RENDERER_WEBGL).indexOf('SwiftShader') > -1){
+                       hasGPU = false;
+                   }
+                   var success = !!(gl && gl.getContextAttributes().stencil && hasGPU);
+                   var loseContext = gl.getExtension('WEBGL_lose_context');
+                   if (loseContext) {
+                       loseContext.loseContext();
+                   }
+               }
+               gl = null;
+               return success;
+           }
+           catch (e) {
+               return false;
+           }
+       })();
+   }
+   return supported;
 }
 
 var aliceblue = "#f0f8ff";
